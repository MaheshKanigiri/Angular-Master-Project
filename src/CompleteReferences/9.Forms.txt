Let's create a new component for demonstrating Angular forms. We'll cover both template-driven and reactive forms in this new component.

### 9. Angular Forms

#### Step 1: Create a New Component for Forms

1. **Generate the New Component**

   ```bash
   ng generate component forms
   ```

#### Step 2: Template-driven Forms

Template-driven forms are built using Angular directives in the template and rely on the `FormsModule`.

1. **Setup FormsModule**

   Ensure that `FormsModule` is imported in your `AppModule`.

   - Open `src/app/app.module.ts`:
     ```typescript
     import { NgModule } from '@angular/core';
     import { BrowserModule } from '@angular/platform-browser';
     import { FormsModule, ReactiveFormsModule } from '@angular/forms'; // Import FormsModule and ReactiveFormsModule
     import { AppComponent } from './app.component';
     import { AppRoutingModule } from './app-routing.module';
     import { ExampleComponent } from './example/example.component';
     import { UserProfileComponent } from './user-profile/user-profile.component';
     import { ProductComponent } from './product/product.component';
     import { CustomerComponent } from './customer/customer.component';
     import { CustomerAccessComponent } from './customer-access/customer-access.component';
     import { CustomerDetailComponent } from './customer-detail/customer-detail.component';
     import { FormsComponent } from './forms/forms.component'; // Import new FormsComponent

     @NgModule({
       declarations: [
         AppComponent,
         ExampleComponent,
         UserProfileComponent,
         ProductComponent,
         CustomerComponent,
         CustomerAccessComponent,
         CustomerDetailComponent,
         FormsComponent // Declare new FormsComponent
       ],
       imports: [
         BrowserModule,
         AppRoutingModule,
         FormsModule, // Add FormsModule here
         ReactiveFormsModule // Add ReactiveFormsModule here
       ],
       providers: [],
       bootstrap: [AppComponent]
     })
     export class AppModule { }
     ```

2. **Create a Template-driven Form**

   - Open `src/app/forms/forms.component.html`:
     ```html
     <h2>Template-driven Form</h2>
     <form #userForm="ngForm" (ngSubmit)="onSubmit(userForm)">
       <div>
         <label for="name">Name:</label>
         <input type="text" id="name" name="name" ngModel required>
       </div>
       <div>
         <label for="email">Email:</label>
         <input type="email" id="email" name="email" ngModel required>
       </div>
       <button type="submit" [disabled]="!userForm.valid">Submit</button>
     </form>
     ```

3. **Handle Form Submission**

   Implement the form submission logic in the `FormsComponent`.

   - Open `src/app/forms/forms.component.ts`:
     ```typescript
     import { Component } from '@angular/core';

     @Component({
       selector: 'app-forms',
       templateUrl: './forms.component.html',
       styleUrls: ['./forms.component.css']
     })
     export class FormsComponent {
       constructor() { }

       onSubmit(userForm: any): void {
         console.log('User Form Data:', userForm.value);
       }
     }
     ```

#### Step 3: Reactive Forms

Reactive forms are built using `FormControl` and `FormGroup` classes and rely on `ReactiveFormsModule`.

1. **Create a Reactive Form**

   Let's add a reactive form in the same `FormsComponent`.

   - Update `src/app/forms/forms.component.ts` to define the form:
     ```typescript
     import { Component, OnInit } from '@angular/core';
     import { FormBuilder, FormGroup, Validators } from '@angular/forms';

     @Component({
       selector: 'app-forms',
       templateUrl: './forms.component.html',
       styleUrls: ['./forms.component.css']
     })
     export class FormsComponent implements OnInit {
       userForm: FormGroup;

       constructor(private fb: FormBuilder) {
         this.userForm = this.fb.group({
           name: ['', Validators.required],
           email: ['', [Validators.required, Validators.email]]
         });
       }

       ngOnInit(): void { }

       onSubmit(): void {
         console.log('User Form Data:', this.userForm.value);
       }
     }
     ```

2. **Update Template**

   - Open `src/app/forms/forms.component.html` and update the template to include both forms:
     ```html
     <h2>Template-driven Form</h2>
     <form #userForm="ngForm" (ngSubmit)="onSubmit(userForm)">
       <div>
         <label for="name">Name:</label>
         <input type="text" id="name" name="name" ngModel required>
       </div>
       <div>
         <label for="email">Email:</label>
         <input type="email" id="email" name="email" ngModel required>
       </div>
       <button type="submit" [disabled]="!userForm.valid">Submit</button>
     </form>

     <h2>Reactive Form</h2>
     <form [formGroup]="userForm" (ngSubmit)="onSubmit()">
       <div>
         <label for="name">Name:</label>
         <input type="text" id="name" formControlName="name">
         <div *ngIf="userForm.controls['name'].invalid && userForm.controls['name'].touched">
           Name is required.
         </div>
       </div>
       <div>
         <label for="email">Email:</label>
         <input type="email" id="email" formControlName="email">
         <div *ngIf="userForm.controls['email'].invalid && userForm.controls['email'].touched">
           Enter a valid email.
         </div>
       </div>
       <button type="submit" [disabled]="!userForm.valid">Submit</button>
     </form>
     ```

#### Step 4: Add Routing for FormsComponent

1. **Define a Route**

   Open `src/app/app-routing.module.ts` and add a route for the new `FormsComponent`:

   ```typescript
   import { FormsComponent } from './forms/forms.component';

   const routes: Routes = [
     { path: '', redirectTo: '/example', pathMatch: 'full' },
     { path: 'example', component: ExampleComponent },
     { path: 'user-profile', component: UserProfileComponent },
     { path: 'product', component: ProductComponent },
     { path: 'customer', component: CustomerComponent },
     { path: 'customer-access', component: CustomerAccessComponent },
     { path: 'forms', component: FormsComponent } // Add new route here
   ];
   ```

2. **Add Navigation Link**

   Update `src/app/app.component.html` to include a navigation link to the new `FormsComponent`:

   ```html
   <div class="container">
     <h1>Welcome to My Angular App!</h1>

     <nav>
       <a routerLink="/example" routerLinkActive="active">Example</a> |
       <a routerLink="/user-profile" routerLinkActive="active">User Profile</a> |
       <a routerLink="/product" routerLinkActive="active">Product</a> |
       <a routerLink="/customer" routerLinkActive="active">Customer</a> |
       <a routerLink="/customer-access" routerLinkActive="active">Customer Access</a> |
       <a routerLink="/forms" routerLinkActive="active">Forms</a> <!-- New link -->
     </nav>

     <hr>

     <router-outlet></router-outlet>
   </div>
   ```

### Testing

1. **Serve the application**:
   ```bash
   ng serve
   ```

2. **Navigate to your application**:
   Open `http://localhost:4200` in your browser and use the navigation link to switch to the "Forms"
   section and test the forms.

This setup demonstrates both template-driven and reactive forms in a new `FormsComponent`,
integrated with the routing system in your Angular application. Let me know if you're ready
to move on to the next topic or if you have any questions!
